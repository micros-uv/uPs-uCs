1
00:00:00,030 --> 00:00:03,569
the Ben Heck show is brought to you by

2
00:00:01,530 --> 00:00:05,459
element 14 the electronic design

3
00:00:03,569 --> 00:00:07,709
community and online store built for

4
00:00:05,459 --> 00:00:09,949
engineers and hobbyists alike join now

5
00:00:07,710 --> 00:00:12,599
and browse the store at element14.com

6
00:00:09,949 --> 00:00:14,638
Benjamin J hekkador was a mild-mannered

7
00:00:12,599 --> 00:00:21,929
graphic artist until he was bitten by

8
00:00:14,638 --> 00:00:24,210
the electronics bug now every week he

9
00:00:21,929 --> 00:00:26,189
takes on new projects shares tips and

10
00:00:24,210 --> 00:00:31,500
tricks and answers your viewer questions

11
00:00:26,189 --> 00:00:34,109
on the Ben Heck show hello and welcome

12
00:00:31,500 --> 00:00:36,119
back to the Ben Heck show I've used this

13
00:00:34,109 --> 00:00:37,769
custom-built AVR development board and

14
00:00:36,119 --> 00:00:39,988
past episode and we've had several

15
00:00:37,770 --> 00:00:41,280
people ask about it so today I'm going

16
00:00:39,988 --> 00:00:42,839
to show you how to put together one of

17
00:00:41,280 --> 00:00:44,700
your own and point you in the right

18
00:00:42,840 --> 00:00:48,539
direction of the schematics and diagrams

19
00:00:44,700 --> 00:00:51,750
you'll need online let's get started but

20
00:00:48,539 --> 00:00:53,189
first the news today in Ben news I'd

21
00:00:51,750 --> 00:00:55,229
like to show you this new 3d printed

22
00:00:53,189 --> 00:00:57,539
elevator I made for my ghost squad

23
00:00:55,229 --> 00:00:59,519
pinball machine the ball comes in here

24
00:00:57,539 --> 00:01:01,469
rolls down and the hella Vater can come

25
00:00:59,520 --> 00:01:03,480
down like this and make the ball go into

26
00:01:01,469 --> 00:01:06,079
a secret path 3d printing was great I

27
00:01:03,479 --> 00:01:08,789
was able to 3d print a rack and pinion

28
00:01:06,079 --> 00:01:10,618
sidewalls for the elevator and even

29
00:01:08,790 --> 00:01:12,330
these main supports so yeah it's great

30
00:01:10,618 --> 00:01:14,040
adds quite strong and it's

31
00:01:12,329 --> 00:01:15,298
three-dimensional so this is a great

32
00:01:14,040 --> 00:01:16,950
example of what you can do with 3d

33
00:01:15,299 --> 00:01:20,490
printing takes a while to print all this

34
00:01:16,950 --> 00:01:22,020
but it's worth it let's start by talking

35
00:01:20,489 --> 00:01:25,079
about the differences between an in

36
00:01:22,019 --> 00:01:27,750
circuit serial programmer or ICSP and a

37
00:01:25,079 --> 00:01:29,129
serial bootloader the in circuit serial

38
00:01:27,750 --> 00:01:31,228
programmer usually requires you to have

39
00:01:29,129 --> 00:01:32,879
a little box the programmer this box

40
00:01:31,228 --> 00:01:34,739
connects to your computer via a USB

41
00:01:32,879 --> 00:01:37,109
cable and then it connects to your

42
00:01:34,739 --> 00:01:40,169
development circuit or microcontroller

43
00:01:37,109 --> 00:01:41,670
be a 6-pin programmer now these boxes

44
00:01:40,170 --> 00:01:43,259
vary depending on what kind of chipper

45
00:01:41,670 --> 00:01:45,509
you're using there's a certain one for

46
00:01:43,259 --> 00:01:46,920
an AVR and a different one for a pic but

47
00:01:45,509 --> 00:01:48,420
they're basically do the same thing and

48
00:01:46,920 --> 00:01:50,519
then typically user the program on your

49
00:01:48,420 --> 00:01:52,200
computer such as AVR studio 6 or a

50
00:01:50,519 --> 00:01:54,209
standalone program that flashes hex

51
00:01:52,200 --> 00:01:55,769
files this is the method typically used

52
00:01:54,209 --> 00:01:57,879
for professional development and also

53
00:01:55,769 --> 00:02:00,170
flashing bootloader

54
00:01:57,879 --> 00:02:02,239
now let's talk about a serial bootloader

55
00:02:00,170 --> 00:02:03,769
which is what the arduino uses you need

56
00:02:02,239 --> 00:02:05,239
to flash your microcontroller with a

57
00:02:03,769 --> 00:02:06,769
boot little program which sits at the

58
00:02:05,239 --> 00:02:08,868
beginning of memory you need to flash

59
00:02:06,769 --> 00:02:11,120
the chip using your in circuit serial

60
00:02:08,868 --> 00:02:12,710
programmer but once you do you're able

61
00:02:11,120 --> 00:02:15,379
to program the chip using the RX and TX

62
00:02:12,710 --> 00:02:16,610
serial communication pins however you

63
00:02:15,379 --> 00:02:18,259
need some sort of interpreter between

64
00:02:16,610 --> 00:02:20,990
that so usually have a USB to serial

65
00:02:18,259 --> 00:02:22,489
adapter typically an FTDI chip or

66
00:02:20,990 --> 00:02:24,860
another small marker controller that

67
00:02:22,490 --> 00:02:27,260
takes your USB commands translates it to

68
00:02:24,860 --> 00:02:29,120
the old-school rx TX and then your chip

69
00:02:27,259 --> 00:02:30,289
programs itself from there so if you

70
00:02:29,120 --> 00:02:31,460
want to flash your own chips for

71
00:02:30,289 --> 00:02:33,139
development you should definitely get an

72
00:02:31,460 --> 00:02:34,430
in circuit serial programmer but then

73
00:02:33,139 --> 00:02:36,949
you can do it this way which is a little

74
00:02:34,430 --> 00:02:37,879
easier knowing that let's talk about

75
00:02:36,949 --> 00:02:39,679
what we're going to build in this

76
00:02:37,879 --> 00:02:41,689
episode we're going to take a little PCB

77
00:02:39,680 --> 00:02:43,580
and put a marker controller socket here

78
00:02:41,689 --> 00:02:45,650
we're going to use the HP mega 3 2 8 and

79
00:02:43,580 --> 00:02:47,150
also a smaller socket here for the 80

80
00:02:45,650 --> 00:02:49,789
tiny so you can program either them

81
00:02:47,150 --> 00:02:51,379
there'll be a 6 pin in circuit serial

82
00:02:49,789 --> 00:02:52,370
programming header here which works with

83
00:02:51,379 --> 00:02:54,680
the AVR programmer

84
00:02:52,370 --> 00:02:56,959
well the crystal on board for driving

85
00:02:54,680 --> 00:03:00,469
the larger market roller via power

86
00:02:56,959 --> 00:03:02,239
switch DC jack and plenty of pins so you

87
00:03:00,469 --> 00:03:04,459
can pin out what you're doing so you can

88
00:03:02,239 --> 00:03:05,719
use this to flash the chip but then you

89
00:03:04,459 --> 00:03:08,319
can just pull the chips out and put them

90
00:03:05,719 --> 00:03:08,319
in another solution

91
00:03:12,759 --> 00:03:17,780
here are most of the parts we need

92
00:03:14,750 --> 00:03:22,098
here the microcontrollers sockets switch

93
00:03:17,780 --> 00:03:24,769
power jack unplug capacitor indicator

94
00:03:22,098 --> 00:03:25,729
light crystal and the header and we also

95
00:03:24,769 --> 00:03:28,188
have these headers here

96
00:03:25,729 --> 00:03:31,098
female headers for adding other things

97
00:03:28,188 --> 00:03:32,719
to it so let's get started this is

98
00:03:31,098 --> 00:03:34,310
important I got this off the Arduino

99
00:03:32,719 --> 00:03:36,889
site it's a schematic for thered we know

100
00:03:34,310 --> 00:03:38,479
Uno now this is the part we actually

101
00:03:36,889 --> 00:03:39,738
need to worry about this is the market

102
00:03:38,479 --> 00:03:42,289
controller and we can use the same pin

103
00:03:39,739 --> 00:03:44,689
out for the larger ship and the 80 tiny

104
00:03:42,289 --> 00:03:46,068
and this part of it right here that's

105
00:03:44,689 --> 00:03:47,658
the in circuit serial programmer so

106
00:03:46,068 --> 00:03:50,358
that's how it's going to be connected on

107
00:03:47,658 --> 00:03:53,060
our board so this is the most important

108
00:03:50,359 --> 00:03:55,370
thing right here we need to copy I added

109
00:03:53,060 --> 00:03:58,158
a little header here so the crystal can

110
00:03:55,370 --> 00:03:59,750
be removable these micro controllers

111
00:03:58,158 --> 00:04:01,548
have internal crystals but if you want

112
00:03:59,750 --> 00:04:04,848
an external crystal about the option to

113
00:04:01,549 --> 00:04:07,849
be there I've started with the header

114
00:04:04,848 --> 00:04:09,738
here this is the pins 28 down through 23

115
00:04:07,848 --> 00:04:11,899
these are the analog connections as you

116
00:04:09,739 --> 00:04:13,909
can see in the schematic so I just

117
00:04:11,900 --> 00:04:18,798
simply you know use little bits of wire

118
00:04:13,909 --> 00:04:21,370
to jump it over manual soldering fun do

119
00:04:18,798 --> 00:04:21,370
it all the time

120
00:04:31,149 --> 00:04:56,709
I better the reset button with a pull-up

121
00:04:54,009 --> 00:04:58,779
resistor the pull-up resistor will put

122
00:04:56,709 --> 00:05:01,418
positive voltage here on the reset line

123
00:04:58,779 --> 00:05:03,909
when you push the button it pulls a

124
00:05:01,418 --> 00:05:05,948
reset line low resetting it and I'm

125
00:05:03,910 --> 00:05:08,080
going to tie the reset lines of both

126
00:05:05,949 --> 00:05:09,280
processors the same pin because you're

127
00:05:08,079 --> 00:05:12,009
not going to use both in the same time

128
00:05:09,279 --> 00:05:13,689
one of the others so I'll attach this

129
00:05:12,009 --> 00:05:24,250
one here and then lock for the reset

130
00:05:13,689 --> 00:05:26,529
switch down here I have common ground

131
00:05:24,250 --> 00:05:30,189
lines wired in see how we go to the

132
00:05:26,529 --> 00:05:32,519
reset switch the tiny end 18 mega is

133
00:05:30,189 --> 00:05:34,660
also a positive voltage rail here and

134
00:05:32,519 --> 00:05:37,389
positive and negative voltage also goes

135
00:05:34,660 --> 00:05:39,039
to the header jack that we're going to

136
00:05:37,389 --> 00:05:41,918
use for programming this is the jack

137
00:05:39,038 --> 00:05:47,139
that you plug your AVR ISP programmer

138
00:05:41,918 --> 00:05:48,699
into to program the device so as I

139
00:05:47,139 --> 00:05:50,889
continue to wire I'm going to hook up

140
00:05:48,699 --> 00:05:53,589
the SPI bus from that programming header

141
00:05:50,889 --> 00:05:55,240
to both of the chips the SPI bus or a

142
00:05:53,589 --> 00:05:57,579
serial peripheral entertained or

143
00:05:55,240 --> 00:05:59,610
interface sometimes called is how the

144
00:05:57,579 --> 00:06:01,859
chips are actually programs

145
00:05:59,610 --> 00:06:04,050
here's how the programming header was

146
00:06:01,860 --> 00:06:06,210
wired you see on the schematic that

147
00:06:04,050 --> 00:06:10,020
depends go to the three programming pins

148
00:06:06,209 --> 00:06:12,739
on the 80 mega which is 17 to 19 we've

149
00:06:10,019 --> 00:06:15,779
got that hooked up here these jumpers

150
00:06:12,740 --> 00:06:19,110
then the 80 tiny we're using pins 5

151
00:06:15,779 --> 00:06:20,250
through 7 here and you can see those

152
00:06:19,110 --> 00:06:23,069
have been connected to the programming

153
00:06:20,250 --> 00:06:26,218
header as well the programming header

154
00:06:23,069 --> 00:06:30,539
also needs positive 5 volts that's as a

155
00:06:26,218 --> 00:06:34,319
reference ground and the reset line so a

156
00:06:30,538 --> 00:06:36,300
reset button it's also hooked up the

157
00:06:34,319 --> 00:06:37,348
burger main header that allows the

158
00:06:36,300 --> 00:06:38,310
programming header to reset the

159
00:06:37,348 --> 00:06:42,240
processor and get it ready for

160
00:06:38,310 --> 00:06:43,939
programming now here's the power portion

161
00:06:42,240 --> 00:06:47,759
of it we have a DC jack coming in

162
00:06:43,939 --> 00:06:51,060
capacitor to smooth it out on and off

163
00:06:47,759 --> 00:06:52,348
switch an LED indicator and then the

164
00:06:51,060 --> 00:06:53,848
power goes to both of the

165
00:06:52,348 --> 00:06:57,990
microcontrollers and the ground was the

166
00:06:53,848 --> 00:07:00,028
ground so just hook it up here click it

167
00:06:57,990 --> 00:07:02,668
on and test the power make sure the

168
00:07:00,028 --> 00:07:06,418
power is going we need to go yep 5 volts

169
00:07:02,668 --> 00:07:08,959
there and then in this one it's GZ 4 5 6

170
00:07:06,418 --> 00:07:11,908
7 yep

171
00:07:08,959 --> 00:07:14,250
so that's pretty much all the wiring I'm

172
00:07:11,908 --> 00:07:15,930
going to label these pins and now we can

173
00:07:14,250 --> 00:07:18,139
move on to the actual programming part

174
00:07:15,930 --> 00:07:18,139
of this

175
00:07:42,889 --> 00:07:48,019
pitching your big idea to senior

176
00:07:44,910 --> 00:07:49,710
management easier said than done

177
00:07:48,019 --> 00:07:52,109
researching designing and prototyping

178
00:07:49,709 --> 00:07:56,819
your big idea using the node on element

179
00:07:52,110 --> 00:07:59,009
14 yup much easier discover how we're

180
00:07:56,819 --> 00:08:09,509
listening to your feedback and building

181
00:07:59,009 --> 00:08:12,120
a better experience now it's time to

182
00:08:09,509 --> 00:08:15,168
program here are the parts we need it's

183
00:08:12,120 --> 00:08:17,788
a power cable to plug into our board

184
00:08:15,168 --> 00:08:18,990
even though this header has a power

185
00:08:17,788 --> 00:08:20,370
connection on it you can't actually

186
00:08:18,990 --> 00:08:23,100
power this board through the programmer

187
00:08:20,370 --> 00:08:24,538
you need its own power supply then of

188
00:08:23,100 --> 00:08:26,939
course we plug in our programmer right

189
00:08:24,538 --> 00:08:30,478
here then we plug the programmer into

190
00:08:26,939 --> 00:08:32,038
the computer via the USB port the first

191
00:08:30,478 --> 00:08:35,370
chip we're going to program is an eighty

192
00:08:32,038 --> 00:08:39,379
tiny 45 it's a small 8 pin AVR

193
00:08:35,370 --> 00:08:45,060
microcontroller let's turn on the power

194
00:08:39,379 --> 00:08:47,129
light turns green ok this is AVR studio

195
00:08:45,059 --> 00:08:49,139
6 you can download this development

196
00:08:47,129 --> 00:08:51,809
environment for free from the App Mail

197
00:08:49,139 --> 00:08:56,309
website we go up to tools and device

198
00:08:51,809 --> 00:08:58,949
programming then we wait a few years for

199
00:08:56,309 --> 00:09:01,799
it to load up ok we select our tool we

200
00:08:58,950 --> 00:09:06,360
want the AVR is B mark 2 device we have

201
00:09:01,799 --> 00:09:08,609
to set to 80 tiny 45 there it is

202
00:09:06,360 --> 00:09:12,000
interface is P that's correct we hit

203
00:09:08,610 --> 00:09:13,560
apply and see if we get anything ok that

204
00:09:12,000 --> 00:09:15,990
works so we hit read the device

205
00:09:13,559 --> 00:09:17,789
signature alright so we got a result

206
00:09:15,990 --> 00:09:21,389
there which means that we are connected

207
00:09:17,789 --> 00:09:23,969
to it properly let's see as is P clock

208
00:09:21,389 --> 00:09:25,559
we just leave that as is the is P clock

209
00:09:23,970 --> 00:09:27,120
does it actually sets the speed at which

210
00:09:25,559 --> 00:09:28,649
it gets programmed rather than the speed

211
00:09:27,120 --> 00:09:30,629
at which it runs you always want the

212
00:09:28,649 --> 00:09:32,939
clock to be slower then it's Drive speed

213
00:09:30,629 --> 00:09:34,649
so you don't break the chip basically so

214
00:09:32,940 --> 00:09:35,880
you can always program in it at slowest

215
00:09:34,649 --> 00:09:37,769
speed and at least get in there and

216
00:09:35,879 --> 00:09:39,088
change stuff so now that we know that

217
00:09:37,769 --> 00:09:42,889
it's connected let's write a little

218
00:09:39,089 --> 00:09:42,890
sample code to test out our 80 tiny

219
00:09:52,370 --> 00:10:01,019
so I'm just going to hook up this led to

220
00:09:54,690 --> 00:10:03,600
PB 0 of the 80 tiny so eighty tiny has a

221
00:10:01,019 --> 00:10:05,610
voltage ground and it has six i/o

222
00:10:03,600 --> 00:10:07,409
although one of them is also used for

223
00:10:05,610 --> 00:10:09,210
the reset line so I typically leave that

224
00:10:07,409 --> 00:10:11,219
one alone because if you try to use it

225
00:10:09,210 --> 00:10:13,110
as a digital i/o we will need a high

226
00:10:11,220 --> 00:10:17,550
voltage programmer so basically we have

227
00:10:13,110 --> 00:10:19,620
pv 0 PB 1 PB 2 3 &amp; 4 &amp; 3 &amp; 4 also can be

228
00:10:17,549 --> 00:10:23,219
used as analog digital converters the

229
00:10:19,620 --> 00:10:25,169
first 3 pins here are also your 0 clock

230
00:10:23,220 --> 00:10:27,060
master in slave out master out slave in

231
00:10:25,169 --> 00:10:28,979
for your programming so when you program

232
00:10:27,059 --> 00:10:31,799
the 80 tiny you don't want to have

233
00:10:28,980 --> 00:10:33,180
things like LED connected to it just so

234
00:10:31,799 --> 00:10:36,000
it won't interfere with your programming

235
00:10:33,179 --> 00:10:37,339
I mean it doesn't always interfere but

236
00:10:36,000 --> 00:10:39,750
it might

237
00:10:37,340 --> 00:10:42,240
alright so in AVR studio we go to new

238
00:10:39,750 --> 00:10:46,940
project make a location for it and we

239
00:10:42,240 --> 00:10:49,919
select a GC cc executable project okay

240
00:10:46,940 --> 00:10:52,500
alright now we select our device she's

241
00:10:49,919 --> 00:10:55,079
going to be the AG tiny specifically the

242
00:10:52,500 --> 00:10:56,789
oh come on don't do that we select our

243
00:10:55,080 --> 00:10:59,970
device which is going to be the 80 tiny

244
00:10:56,789 --> 00:11:04,019
45 here we have our pin Direction data

245
00:10:59,970 --> 00:11:06,450
Direction port B I'm oaring a1 into the

246
00:11:04,019 --> 00:11:11,519
zero position which makes it an output

247
00:11:06,450 --> 00:11:15,810
so now we need to do this port B or

248
00:11:11,519 --> 00:11:19,189
equals a same thing one shifted 0 to the

249
00:11:15,809 --> 00:11:21,829
left then we do a delay delay

250
00:11:19,190 --> 00:11:24,390
microseconds the nice thing about

251
00:11:21,830 --> 00:11:28,020
something like you know AVR studio is

252
00:11:24,389 --> 00:11:31,409
it's based off once that thing Microsoft

253
00:11:28,019 --> 00:11:33,360
has it's based on visual studio so all

254
00:11:31,409 --> 00:11:35,610
the you know keyboard functions and

255
00:11:33,360 --> 00:11:37,409
tricks that you have are all there I'm

256
00:11:35,610 --> 00:11:40,080
including autocomplete now we're going

257
00:11:37,409 --> 00:11:42,740
to do port B and equals the inverse of

258
00:11:40,080 --> 00:11:46,580
that which will turn off the bit and

259
00:11:42,740 --> 00:11:46,580
then another delay

260
00:11:48,600 --> 00:11:54,490
all right now we're going to hit to f5

261
00:11:52,210 --> 00:11:57,370
to debug and compile and that will also

262
00:11:54,490 --> 00:12:02,560
send it to our chip that we previously

263
00:11:57,370 --> 00:12:22,060
it connected there we go a blinking

264
00:12:02,559 --> 00:12:23,289
light here's something else we should

265
00:12:22,059 --> 00:12:26,019
look at I'm going to go to the device

266
00:12:23,289 --> 00:12:28,360
programming again read the chip and go

267
00:12:26,019 --> 00:12:30,699
down to fuses fuses are what sets

268
00:12:28,360 --> 00:12:33,009
certain things on the chip so here we're

269
00:12:30,700 --> 00:12:35,200
using the internal clock but by default

270
00:12:33,009 --> 00:12:37,029
clock divided by eight design which

271
00:12:35,200 --> 00:12:39,040
means our eight megahertz clock becomes

272
00:12:37,029 --> 00:12:40,689
a 1 megahertz clock we want to use the

273
00:12:39,039 --> 00:12:44,549
full speed of the internal clock we turn

274
00:12:40,690 --> 00:12:46,870
off clock divided by 8 and hit program

275
00:12:44,549 --> 00:12:48,429
so now we're running eight times faster

276
00:12:46,870 --> 00:12:50,710
the full speed of the internal crystal

277
00:12:48,429 --> 00:12:54,269
but now we have to change our program so

278
00:12:50,710 --> 00:12:58,860
we have the timing right here up here

279
00:12:54,269 --> 00:13:01,720
before delay we put define frequency CPU

280
00:12:58,860 --> 00:13:04,029
8,000 you else basically we're saying

281
00:13:01,720 --> 00:13:05,980
the frequency of the CPU is 8,000 that

282
00:13:04,029 --> 00:13:08,110
way our program knows how to calculate

283
00:13:05,980 --> 00:13:10,360
the delay function if we put that

284
00:13:08,110 --> 00:13:12,190
definition after delay or didn't include

285
00:13:10,360 --> 00:13:13,750
it it wouldn't know what speed it is and

286
00:13:12,190 --> 00:13:16,330
therefore it would be the right rate so

287
00:13:13,750 --> 00:13:18,340
if I program it now it knows what the

288
00:13:16,330 --> 00:13:22,500
proper speed is and frequency and the

289
00:13:18,340 --> 00:13:22,500
LED is back to flashing once per second

290
00:13:43,230 --> 00:13:46,090
now that we've used this board to

291
00:13:45,070 --> 00:13:49,690
program in eighty tiny

292
00:13:46,090 --> 00:13:52,000
let's use it to clone an Arduino alright

293
00:13:49,690 --> 00:13:53,800
so we we have an Arduino to give it

294
00:13:52,000 --> 00:13:56,230
power and then we also plug in the

295
00:13:53,799 --> 00:13:58,509
programming header that for these extra

296
00:13:56,230 --> 00:14:01,480
headers are for on there as we know now

297
00:13:58,509 --> 00:14:11,169
in AVR studio we go up here and we

298
00:14:01,480 --> 00:14:13,240
change your device to 18 mega 32:8 hit

299
00:14:11,169 --> 00:14:15,250
apply we read it okay there is our

300
00:14:13,240 --> 00:14:17,080
device we're going to go to memories and

301
00:14:15,250 --> 00:14:22,240
then we're going to do is we're going to

302
00:14:17,080 --> 00:14:24,720
read the memory off of the Arduino so

303
00:14:22,240 --> 00:14:30,820
I'll just put it on the desktop here

304
00:14:24,720 --> 00:14:34,480
just call it argue me he'll DL for

305
00:14:30,820 --> 00:14:37,230
bootloader okay now it's copying what's

306
00:14:34,480 --> 00:14:40,090
on the Arduino and creating a hex file

307
00:14:37,230 --> 00:14:42,310
you can actually set bits in your chip

308
00:14:40,090 --> 00:14:44,220
to keep it from being copied to kind of

309
00:14:42,309 --> 00:14:46,029
protect it so no one can take your code

310
00:14:44,220 --> 00:14:48,160
obviously they don't bother doing that

311
00:14:46,029 --> 00:14:49,539
with your do we know but in professional

312
00:14:48,159 --> 00:14:51,159
applications they might actually do that

313
00:14:49,539 --> 00:14:52,870
to prevent people from copying that's

314
00:14:51,159 --> 00:14:55,679
basically a one-way street you can't

315
00:14:52,870 --> 00:14:59,710
read anything on the chip ever again

316
00:14:55,679 --> 00:15:02,159
okay now we're going to unplug this just

317
00:14:59,710 --> 00:15:02,160
put this aside

318
00:15:03,149 --> 00:15:10,600
move our 80 tiny yes I know a toothpick

319
00:15:07,330 --> 00:15:14,620
is only the proper way to do this you'll

320
00:15:10,600 --> 00:15:15,330
have that ah well I'm doing all sorts of

321
00:15:14,620 --> 00:15:21,220
crap today

322
00:15:15,330 --> 00:15:26,740
I put in 18 mega three to eight one

323
00:15:21,220 --> 00:15:30,940
alright put our program around this here

324
00:15:26,740 --> 00:15:33,940
power plugged in so I'm going to go into

325
00:15:30,940 --> 00:15:36,940
AV our programming and read it okay I've

326
00:15:33,940 --> 00:15:39,070
got an air old we need the crystal

327
00:15:36,940 --> 00:15:40,810
without the crystal it won't work this

328
00:15:39,070 --> 00:15:42,520
thing has an internal oscillator as well

329
00:15:40,809 --> 00:15:44,349
but if it's fuses aren't set to use the

330
00:15:42,519 --> 00:15:47,528
internal oscillator it needs an external

331
00:15:44,350 --> 00:15:49,600
oscillator turn it back on okay we go

332
00:15:47,528 --> 00:15:51,669
here we read it okay we have a device

333
00:15:49,600 --> 00:15:53,550
signature which means we're good so we

334
00:15:51,669 --> 00:15:58,000
do a couple things we go into memory and

335
00:15:53,549 --> 00:16:02,109
we load up the Arduino VL file we just

336
00:15:58,000 --> 00:16:11,639
got now we program that to this chip we

337
00:16:02,110 --> 00:16:11,639
do this takes a couple seconds

338
00:16:12,759 --> 00:16:18,879
oh it's done okay you have to do a few

339
00:16:16,659 --> 00:16:19,719
more things we go into fuses okay to set

340
00:16:18,879 --> 00:16:21,610
in a certain way

341
00:16:19,720 --> 00:16:23,079
SPI enable you definitely want that

342
00:16:21,610 --> 00:16:25,870
because if you can't program at via SPI

343
00:16:23,078 --> 00:16:27,939
then you can't you basically need a high

344
00:16:25,870 --> 00:16:29,769
voltage programmer but that's what we're

345
00:16:27,940 --> 00:16:31,690
doing boot size this is actually how

346
00:16:29,769 --> 00:16:34,810
much room the bootloader takes up and

347
00:16:31,690 --> 00:16:35,920
then boot on reset clock divided and

348
00:16:34,809 --> 00:16:39,059
then all here you can see the external

349
00:16:35,919 --> 00:16:39,059
oscillator right there

350
00:16:44,009 --> 00:16:49,778
alright so we program those fuses in

351
00:16:47,278 --> 00:16:53,439
NASA program the lock bit it's basically

352
00:16:49,778 --> 00:16:55,419
no lock alright alright so now we

353
00:16:53,440 --> 00:16:56,920
basically cloned in Arduino now we can

354
00:16:55,419 --> 00:16:58,448
try to hook it up using the serial

355
00:16:56,919 --> 00:17:00,569
bootloader we talked about earlier in

356
00:16:58,448 --> 00:17:00,569
the episode

357
00:17:09,079 --> 00:17:12,449
on an Arduino the usb-to-serial

358
00:17:11,579 --> 00:17:14,220
bootloader

359
00:17:12,450 --> 00:17:16,620
goes through this integrated circuit

360
00:17:14,220 --> 00:17:18,539
here we can also do it using this

361
00:17:16,619 --> 00:17:21,119
integrated circuit which is the FTDI

362
00:17:18,539 --> 00:17:22,049
chip it's a very common chip you find in

363
00:17:21,119 --> 00:17:24,929
a lot of components

364
00:17:22,049 --> 00:17:26,759
this is actually an explorer to read XP

365
00:17:24,930 --> 00:17:28,170
modules but we can use it to interface

366
00:17:26,759 --> 00:17:30,180
with an Arduino because it's basically

367
00:17:28,170 --> 00:17:32,370
just a USB to serial converter that's

368
00:17:30,180 --> 00:17:35,009
all this is so if you go online and look

369
00:17:32,369 --> 00:17:36,959
up FTDI to arduino you can find the pin

370
00:17:35,009 --> 00:17:38,940
out for connecting your FTDI chip to

371
00:17:36,960 --> 00:17:41,210
your Arduino which is what I'm doing

372
00:17:38,940 --> 00:17:41,210
right now

373
00:17:51,079 --> 00:17:56,939
so this FTDI chip the main connections

374
00:17:54,059 --> 00:18:00,029
we need from it are cts rx TX DTR and

375
00:17:56,940 --> 00:18:01,980
ground DTR which resets it goes through

376
00:18:00,029 --> 00:18:05,250
a capacitor and then to the reset pin of

377
00:18:01,980 --> 00:18:07,950
the MCU then we have our X TX which go

378
00:18:05,250 --> 00:18:10,710
to the rx TX pins of the MCU and then

379
00:18:07,950 --> 00:18:13,680
finally CTS clear to send we just put

380
00:18:10,710 --> 00:18:16,640
that to ground so this here is a little

381
00:18:13,680 --> 00:18:19,320
module that simulates what this does

382
00:18:16,640 --> 00:18:20,790
this is a module that does the same as

383
00:18:19,319 --> 00:18:23,039
this it does your USB to serial

384
00:18:20,789 --> 00:18:24,210
conversion so when we go into the

385
00:18:23,039 --> 00:18:26,569
Arduino program we should be able to

386
00:18:24,210 --> 00:18:26,569
send it

387
00:18:37,039 --> 00:18:41,789
and there we go the classic blink

388
00:18:39,210 --> 00:18:44,370
program is working so we flashed our own

389
00:18:41,789 --> 00:18:45,720
chip and then we made our own circuit to

390
00:18:44,369 --> 00:18:47,909
boot loaded so we built our own

391
00:18:45,720 --> 00:18:49,860
development board flashed our own hex

392
00:18:47,910 --> 00:18:52,200
file for the bootloader on the Arduino

393
00:18:49,859 --> 00:18:55,529
and then we use an external serial to

394
00:18:52,200 --> 00:18:56,850
USB programmer to program it see in this

395
00:18:55,529 --> 00:18:59,250
case there's a lot of stuff in here that

396
00:18:56,849 --> 00:19:02,279
you don't necessarily need like the USB

397
00:18:59,250 --> 00:19:05,279
to serial converter the USB jack some of

398
00:19:02,279 --> 00:19:06,960
this power stuff by having the USB to

399
00:19:05,279 --> 00:19:08,460
serial programmer be an external part we

400
00:19:06,960 --> 00:19:10,769
can remove it after we're done so we can

401
00:19:08,460 --> 00:19:12,509
embed the chip I mean this converter

402
00:19:10,769 --> 00:19:14,609
chip actually cost more than the

403
00:19:12,509 --> 00:19:17,339
microcontroller itself so you know we

404
00:19:14,609 --> 00:19:18,869
kind of made it minimalized so we can

405
00:19:17,339 --> 00:19:31,230
actually unplug this and it will keep

406
00:19:18,869 --> 00:19:33,959
running because the chip has not been

407
00:19:31,230 --> 00:19:36,950
programmed of course if you remove the

408
00:19:33,960 --> 00:19:36,950
crystal it won't work

409
00:19:38,839 --> 00:19:45,869
yay there you have it we built our own

410
00:19:43,500 --> 00:19:48,930
little AVR development board that works

411
00:19:45,869 --> 00:19:50,250
with both AVR studio and Arduino for

412
00:19:48,930 --> 00:19:51,870
more information check the links below

413
00:19:50,250 --> 00:19:53,339
and do Google searches to find the

414
00:19:51,869 --> 00:19:59,339
schematics you'll need to wire the board

415
00:19:53,339 --> 00:20:01,199
of your own it's quite simple today I'd

416
00:19:59,339 --> 00:20:02,909
like to rave about Kickstarter it's

417
00:20:01,200 --> 00:20:04,470
really exploded this year with several

418
00:20:02,910 --> 00:20:06,660
projects making multiple millions of

419
00:20:04,470 --> 00:20:08,279
dollars it helps small businesses and

420
00:20:06,660 --> 00:20:10,380
entrepreneurs get their dreams off the

421
00:20:08,279 --> 00:20:11,879
ground and larger companies especially

422
00:20:10,380 --> 00:20:14,070
in gaming to make the kind of things

423
00:20:11,880 --> 00:20:16,410
publishers never support anymore despite

424
00:20:14,069 --> 00:20:18,240
there being an audience for it I do have

425
00:20:16,410 --> 00:20:20,220
some rants though the new Kickstarter

426
00:20:18,240 --> 00:20:21,660
guidelines impede electronic projects

427
00:20:20,220 --> 00:20:24,000
success stories like Louie and ginger

428
00:20:21,660 --> 00:20:25,200
spark would be in violation now there's

429
00:20:24,000 --> 00:20:26,789
also a lot of failures and missed

430
00:20:25,200 --> 00:20:28,410
deadlines on the site if your

431
00:20:26,789 --> 00:20:30,119
kick-starting something take your money

432
00:20:28,410 --> 00:20:33,300
and time estimates and multiply them by

433
00:20:30,119 --> 00:20:35,549
2.6 cover mistakes and delays then add

434
00:20:33,299 --> 00:20:38,279
10% for kickstarter and amazon payment

435
00:20:35,549 --> 00:20:39,960
fees as well as 30% for Uncle Sam

436
00:20:38,279 --> 00:20:41,379
also keep in mind that shipping is

437
00:20:39,960 --> 00:20:43,299
expensive and time

438
00:20:41,380 --> 00:20:45,130
zooming packaging alone can really add

439
00:20:43,299 --> 00:20:47,349
up but make sure the rewards are worth

440
00:20:45,130 --> 00:20:48,880
the shipping for example don't spend

441
00:20:47,349 --> 00:20:55,269
five dollars shipping a seven dollar

442
00:20:48,880 --> 00:20:57,280
t-shirt for $20 pledge today's question

443
00:20:55,269 --> 00:20:59,379
comes from Brendan who asks is there a

444
00:20:57,279 --> 00:21:01,359
type of legal documentation I can give

445
00:20:59,380 --> 00:21:04,540
the potential designers to help me work

446
00:21:01,359 --> 00:21:05,889
on my idea yet protect my ID as well for

447
00:21:04,539 --> 00:21:07,690
legal advice you should always ask a

448
00:21:05,890 --> 00:21:09,910
lawyer first but in my experience I

449
00:21:07,690 --> 00:21:12,490
often have to sign an NDA non-disclosure

450
00:21:09,910 --> 00:21:14,290
agreement basically this prevents me as

451
00:21:12,490 --> 00:21:15,609
a designer from sharing or even talking

452
00:21:14,289 --> 00:21:16,059
about what I'm working on with a third

453
00:21:15,609 --> 00:21:17,979
party

454
00:21:16,059 --> 00:21:19,509
you should also draft a contract which

455
00:21:17,980 --> 00:21:21,460
ensures your vendor completes their work

456
00:21:19,509 --> 00:21:23,049
and sets up a schedule should something

457
00:21:21,460 --> 00:21:25,470
go wrong these documents will provide a

458
00:21:23,049 --> 00:21:28,029
legal recourse protecting your interests

459
00:21:25,470 --> 00:21:29,829
that's all the time we have for today in

460
00:21:28,029 --> 00:21:31,839
our next episode I'm going to be

461
00:21:29,829 --> 00:21:34,539
building some custom computers for AMD

462
00:21:31,839 --> 00:21:36,730
using their new Trinity line of AP use

463
00:21:34,539 --> 00:21:38,589
along with the new micro ATX board from

464
00:21:36,730 --> 00:21:42,880
MSI we'll see you then

465
00:21:38,589 --> 00:21:44,529
stay tuned at element14.com /t BHS where

466
00:21:42,880 --> 00:21:46,090
you can join the discussion suggest

467
00:21:44,529 --> 00:21:48,369
builds for the show and even have a

468
00:21:46,089 --> 00:21:50,409
chance to win upcoming bills remember

469
00:21:48,369 --> 00:21:53,049
you can always email build ideas to Ben

470
00:21:50,410 --> 00:21:55,380
Heck at element14.com thanks for

471
00:21:53,049 --> 00:21:55,379
watching

